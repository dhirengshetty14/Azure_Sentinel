@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using AzureSentinel.Core.Models
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Azure Sentinel - Real-time Logs</PageTitle>
<h1>Live Log Stream</h1>
<p>This dashboard connects to the Log Ingestor API via SignalR and displays logs as they arrive.</p>

@if (isConnecting)
{
    <div class="alert alert-info">Connecting to the real-time service...</div>
}
else if (hubConnection is null || hubConnection.State == HubConnectionState.Disconnected)
{
    <div class="alert alert-danger">Could not connect to the real-time service.</div>
}
else
{
    <div class="alert alert-success">Connected! Waiting for logs...</div>
}

<table class="table table-striped table-hover mt-4">
    <thead class="thead-dark">
        <tr>
            <th>Timestamp (UTC)</th>
            <th>Level</th>
            <th>Source App</th>
            <th>Message</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var log in logs)
        {
            <tr>
                <td>@log.Timestamp.ToString("o")</td>
                <td><span class="badge @GetLogLevelBadge(log.Level)">@log.Level</span></td>
                <td>@log.SourceApplication</td>
                <td>@log.Message</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private HubConnection? hubConnection;
    private List<LogEntry> logs = new List<LogEntry>();
    private bool isConnecting = true;

    protected override async Task OnInitializedAsync()
    {
        var hubUrl = "http://localhost:5000/loghub";
        hubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl)
            .Build();

        hubConnection.On<LogEntry>("ReceiveLog", (logEntry) =>
        {
            logs.Insert(0, logEntry);
            if (logs.Count > 50)
            {
                logs.RemoveAt(logs.Count - 1);
            }
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
        }
        finally
        {
            isConnecting = false;
        }
    }

    private string GetLogLevelBadge(string level) => level.ToLower() switch
    {
        "error" => "bg-danger text-white",
        "warning" => "bg-warning text-dark",
        "info" => "bg-info text-dark",
        _ => "bg-secondary text-white"
    };
    
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}